# DSpace Docker deploy on dataquest servers
name: Deploy DSpace

on:
  workflow_call:
    inputs:
      INSTANCE:
        required: false
        type: string
        default: '5'
      IMPORT:
        required: false
        default: true
        type: boolean

  workflow_dispatch:
    inputs:
      INSTANCE:
        required: true
        default: '5'
        type: choice
        options:
          - '*'
          - '5'
          - '8'
      IMPORT:
        required: true
        default: true
        type: boolean

jobs:
  deploy:
    if: github.event.inputs.INSTANCE == '*' || github.event.inputs.INSTANCE == '5'
    runs-on: dspace-dep-1
    timeout-minutes: 5
    env:
      INSTANCE: '5'
      ENVFILE: /opt/dspace-envs/.env.dspace.dev-5
    steps:
      - uses: actions/checkout@v4

      - name: deploy to dev-5
        working-directory: build-scripts/run/
        run: |
          ./start.sh dspace-$INSTANCE

  deploy-8:
    if: github.event.inputs.INSTANCE == '*' || github.event.inputs.INSTANCE == '8'
    runs-on: dspace-dep-1
    timeout-minutes: 120
    env:
      INSTANCE: '8'
      ENVFILE: /opt/dspace-envs/.env.dspace.imported.dev-5
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/erase-db
        with:
          INSTANCE: ${{ env.INSTANCE }}
          NAME: dspace-${{ env.INSTANCE }}

      - name: deploy dspace-import on dev-5
        working-directory: build-scripts/run/
        run: |
          ./start.sh dspace-$INSTANCE
          /bin/bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' http://dev-5.pc:8$INSTANCE/server/api)" != "200" ]]; do sleep 5; done'


  import-8:
    runs-on: dspace-dep-1
    if: github.event.inputs.IMPORT == 'true'
    needs: deploy-8
    env:
      INSTANCE: '8'
      ENVFILE: /opt/dspace-envs/.env.dspace.imported.dev-5
    steps:
      - uses: ./.github/actions/import-db
        with:
          INSTANCE: ${{ env.INSTANCE }}
          DATADIR: /opt/dspace-data/clarin-dspace/

      - name: dspace command
        run: |
          export DNAME=dspace$INSTANCE
          docker logs -n 50 $DNAME

          echo "dspace version:"
          docker exec $DNAME /bin/bash -c "cd /dspace/bin && ./dspace version"

          echo "dspace cleanup:"
          docker exec $DNAME /bin/bash -c "cd /dspace/bin && ./dspace cleanup -v"

          echo "dspace checker:"
          docker exec $DNAME /bin/bash -c "cd /dspace/bin && ./dspace checker -v -l"

          echo "dspace healthcheck:"
          docker exec $DNAME /bin/bash -c "cd /dspace/bin && ./dspace healthcheck -v"
